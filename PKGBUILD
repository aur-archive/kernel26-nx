# Maintainer: archman (https://bbs.archlinux.org/profile.php?id=35694)
pkgbase="kernel26"
pkgname=('kernel26-nx')
# pkgname=('kernel26-nx-headers')
_kernelname=${pkgname#kernel26}
_basekernel=2.6.39
pkgver=${_basekernel}.4
pkgrel=1
_nxver=$_basekernel$_kernelname
makedepends=('xmlto' 'docbook-xsl')
_patchname="patch-${pkgver}.bz2"
_toipatch="current-tuxonice-for-2.6.39.patch.bz2"
options=(!strip)
arch=(i686)
license=('GPL2')
url="http://www.kernel.org"

source=(ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$_basekernel.tar.bz2
        http://www.kernel.org/pub/linux/kernel/v2.6/${_patchname}
        http://tuxonice.net/files/${_toipatch}
	config
	${pkgname}.preset
	http://patches.aircrack-ng.org/channel-negative-one-maxim.patch)
md5sums=('1aab7a741abe08d42e8eccf20de61e05'
         'ff5eb7323c054a128d2922bde3297ed5'
	 '9b4437a544146c2d08a357cc31a0ed9e'
	 '051cd0b961c5228492b4816f86f51ce1'
	 '176fe754182ee08a2bf5148a8c8e8212'
         '12553c7b16b615f979def399c47b3a76')

# User-defined variables
official_patch=${official_patch:-1}
toi_patch=${toi_patch:-1}

build() {
  cd ${srcdir}/linux-$_basekernel
  echo -e "\n\033[1mApplying the following patches:\033[0m\n"

  if [ "$official_patch" = "1" ]; then
	echo -e " - \033[1;32mOfficial Linux patch: \033[1;33m${pkgver}\033[0m"
  fi

  if [ "$toi_patch" = "1" ]; then
        echo -e " - \033[1;32mTuxOnIce patch: \033[1;33m${_toipatch}\033[0m"
  fi

  echo -e " - \033[1;32mChannel Negative One patch \033[0m"
  echo -e "\n\033[1mPress <Enter> to proceed...\033[0m\n"
  read userinput1
  echo -e "\n==> \033[1;34mStart patching...\033[0m\n"

  # Official patch
  if [ "$official_patch" = "1" ]; then
	echo -e "\n\033[1;32mApplying Official Linux patch...\033[0m"
	bzcat ${srcdir}/${_patchname} | patch -p1
  fi

  # TuxOnIce patch
  if [ "$toi_patch" = "1" ]; then
        echo -e "\n\033[1;32mApplying TuxOnIce patch...\033[0m"
        bzcat ${srcdir}/${_toipatch} | patch -p1
  fi

  # negative one patch
  echo -e "\n\033[1;32mApplying aircrack-ng patch...\033[0m"
  patch -Np1 -i ${srcdir}/channel-negative-one-maxim.patch

  echo -e "\n\033[1;32mPatching done...\033[0m"
  echo -e "\033[1mPress <Enter> to continue...\033[0m"
  read userinput2

  # Fix versioning (tear off the patch version from the kernel name)
  sed -i 's|^EXTRAVERSION = .*$|EXTRAVERSION =|g' Makefile
  cat ../config >./.config

  make prepare
  make oldconfig
  make bzImage modules || return 1
}

package_kernel26-nx() {
  pkgdesc="The Linux Kernel and modules tailored for ey588es"
  groups=('base')
  backup=(etc/mkinitcpio.d/${pkgname}.preset)
  depends=('coreutils' 'linux-firmware' 'module-init-tools>=3.12-2' 'mkinitcpio>=0.6.8-2')
  replaces=('kernel24' 'kernel24-scsi' 'kernel26-scsi'
            'alsa-driver' 'ieee80211' 'hostap-driver26'
            'pwc' 'nforce' 'squashfs' 'unionfs' 'ivtv'
            'zd1211' 'kvm-modules' 'iwlwifi' 'rt2x00-cvs'
            'gspcav1' 'atl2' 'wlan-ng26' 'rt2500' 'nouveau-drm')
  install=${pkgname}.install

  KARCH=x86
  cd ${srcdir}/linux-$_basekernel
  # get kernel version
  # _kernver="$(make kernelrelease)"
  mkdir -p ${pkgdir}/{lib/modules,lib/firmware,boot}
  make INSTALL_MOD_PATH=${pkgdir} modules_install || return 1
  cp System.map ${pkgdir}/boot/System.map26${_kernelname}
  cp arch/$KARCH/boot/bzImage ${pkgdir}/boot/vmlinuz26${_kernelname}
  # add vmlinux
  install -m644 -D vmlinux ${pkgdir}/usr/src/linux-${_nxver}/vmlinux

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -m644 -D ${srcdir}/${pkgname}.preset ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset || return 1
  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_nxver}/g" \
    -i $startdir/${pkgname}.install
  sed \
    -e "s|source .*|source /etc/mkinitcpio.d/kernel26${_kernelname}.kver|g" \
    -e "s|default_image=.*|default_image=\"/boot/${pkgname}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/${pkgname}-fallback.img\"|g" \
    -i ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset

  echo -e "# DO NOT EDIT THIS FILE\nALL_kver='${_nxver}'" > ${pkgdir}/etc/mkinitcpio.d/${pkgname}.kver
  # remove build and source links
  rm -f ${pkgdir}/lib/modules/${_nxver}/{source,build}
  # remove the firmware
  rm -rf ${pkgdir}/lib/firmware
}

package_kernel26-nx-headers() {
  pkgdesc="Header files and scripts for building modules for kernel26-nx"
  mkdir -p ${pkgdir}/lib/modules/${_nxver}
  cd ${pkgdir}/lib/modules/${_nxver}
  ln -sf ../../../usr/src/linux-${_nxver} build
  cd ${srcdir}/linux-$_basekernel
  install -D -m644 Makefile \
    ${pkgdir}/usr/src/linux-${_nxver}/Makefile
  install -D -m644 kernel/Makefile \
    ${pkgdir}/usr/src/linux-${_nxver}/kernel/Makefile
  install -D -m644 .config \
    ${pkgdir}/usr/src/linux-${_nxver}/.config
  mkdir -p ${pkgdir}/usr/src/linux-${_nxver}/include
  for i in acpi asm-generic config generated linux math-emu media net pcmcia scsi sound trace video xen; do
    cp -a include/$i ${pkgdir}/usr/src/linux-${_nxver}/include/
  done

  # copy arch includes for external modules
  mkdir -p ${pkgdir}/usr/src/linux-${_nxver}/arch/x86
  cp -a arch/x86/include ${pkgdir}/usr/src/linux-${_nxver}/arch/x86/

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers ${pkgdir}/usr/src/linux-${_nxver}
  cp -a scripts ${pkgdir}/usr/src/linux-${_nxver}

  # fix permissions on scripts dir
  chmod og-w -R ${pkgdir}/usr/src/linux-${_nxver}/scripts
  mkdir -p ${pkgdir}/usr/src/linux-${_nxver}/.tmp_versions

  mkdir -p ${pkgdir}/usr/src/linux-${_nxver}/arch/$KARCH/kernel

  cp arch/$KARCH/Makefile ${pkgdir}/usr/src/linux-${_nxver}/arch/$KARCH/
  if [ "$CARCH" = "i686" ]; then
    cp arch/$KARCH/Makefile_32.cpu ${pkgdir}/usr/src/linux-${_nxver}/arch/$KARCH/
  fi
  cp arch/$KARCH/kernel/asm-offsets.s ${pkgdir}/usr/src/linux-${_nxver}/arch/$KARCH/kernel/

  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do 
    mkdir -p ${pkgdir}/usr/src/linux-${_nxver}/`echo $i | sed 's|/Kconfig.*||'`
    cp $i ${pkgdir}/usr/src/linux-${_nxver}/$i
  done

  chown -R root.root ${pkgdir}/usr/src/linux-${_nxver}
  find ${pkgdir}/usr/src/linux-${_nxver} -type d -exec chmod 755 {} \;
  # remove unneeded architectures
  rm -rf ${pkgdir}/usr/src/linux-${_nxver}/arch/{alpha,arm,arm26,avr32,blackfin,cris,frv,h8300,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,parisc,powerpc,ppc,s390,sh,sh64,sparc,sparc64,um,v850,xtensa}
}
